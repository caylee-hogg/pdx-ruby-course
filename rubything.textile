% README
% THESE SLIDES ARE NOT GOOD - JUST A REALLY SILLY VERBOSE ROUGH DRAFT
% LET'S RIP THEM APART TO MAKE SOMETHING BETTER

h1. Outline of the Day


h1. What is programming?

* Programming is the act of writing programs
* A program is just text
* A program is a precise description of how to perform a *computation* on *data*
* Data
** Numbers
** Strings: pieces of text
** Lists of things
** Booleans: true and false
* Computations
** Add 3 and 4
** Find the largest number in a list of numbers
** Contact Trimet's network and find the most convenient bus route

h1. What is a programming language?

* A human readable format for describing computations
* Compilers or interpreters convert human-readable text to machine-readable
* Any language can describe the same computations
* Different languages are really just a different vocabulary
* Different vocabularies offer different ways of expressing an idea: like human languages, each programming language makes some things easy to "say" and some things harder

h1. Why Ruby?

* It's easy to learn
* Portland has a strong Ruby community
* Rails gives Ruby a good, simple, vocabulary for web development

h1. Starting Ruby

Open a terminal window. Type "irb" and hit enter.

Try entering a few things: @1@, @1 + 1@, @"1"@, @(0...15).each { |i| puts i }@

@>>@ is your prompt to enter text and @=>@ will appear at the start of each response.

Use your arrow keys to navigate back and forth through the previous commands you've entered.

% Okay, so one thing we need to do here is figure out just exactly what we'll
% do with respect to TryRuby. We can't, in some sense, just have people follow
% along at home because there's all sorts of cute stuff it does with an
% that we can't just replicate easily

h1. Basic Ruby Data

|Numbers | @1@, @2@, @3@|
|Strings | @"chicken"@ |
|Booleans| @true@, @false@|
|Symbols | @:chicken@ |
|Arrays | @[1 , 7, "cake"]@|
|Hashes  | @{:chicken => "chicken", :sillyexample => :chicken}@|

Type these at the command line! What happens?

That's the data, where are the computations?

h1. Basic Ruby Computations

| @2 + 2@ | |
| @3 * 3@ | |
| @"chicken".reverse@ | |
| @"chicken".length@  | |
| @2 + 2 == 4@ | |
| @2 + 2 == 5@ | |
| @[1 , 2, 3].include?(2)@ | | |

h1. Basic Ruby Computations

| @2 + 2@ | @4@ |
| @3 * 3@ | |
| @"chicken".reverse@ | |
| @"chicken".length@  | |
| @2 + 2 == 4@ | |
| @2 + 2 == 5@ | |
| @[1 , 2, 3].include?(2)@ | | |

h1. Basic Ruby Computations

| @2 + 2@ | @4@ |
| @3 * 3@ | @9@ |
| @"chicken".reverse@ | |
| @"chicken".length@  | |
| @2 + 2 == 4@ | |
| @2 + 2 == 5@ | |
| @[1 , 2, 3].include?(2)@ | | |

h1. Basic Ruby Computations

| @2 + 2@ | @4@ |
| @3 * 3@ | @9@ |
| @"chicken".reverse@ | @"nekcihc"@ |
| @"chicken".length@  | |
| @2 + 2 == 4@ | |
| @2 + 2 == 5@ | |
| @[1 , 2, 3].include?(2)@ | | |

h1. Basic Ruby Computations

| @2 + 2@ | @4@ |
| @3 * 3@ | @9@ |
| @"chicken".reverse@ | @"nekcihc"@ |
| @"chicken".length@  | @7@ |
| @2 + 2 == 4@ | @true@ |
| @2 + 2 == 5@ | |
| @[1 , 2, 3].include?(2)@ | | |

h1. Basic Ruby Computations

| @2 + 2@ | @4@ |
| @3 * 3@ | @9@ |
| @"chicken".reverse@ | @"nekcihc"@ |
| @"chicken".length@  | @7@ |
| @2 + 2 == 4@ | @true@ |
| @2 + 2 == 5@ | @false@ |
| @[1 , 2, 3].include?(2)@ | | @true@ |

What do you think @"chicken".reverse.length@ does?
What about @"puppy".include?('p')@?

h1. That's Nice But...

* How do we chain together steps or use the result of an action?
* Variables name particular values
* @var1 = 4@, @var2 = "chicken"@

Try typing the following, noting what happens at each step 

bc. thing = "chicken"
thing
thing.reverse
thing
thing = thing.reverse

h1. Changing variables

* @thing.reverse@ didn't permanently reverse the string!
* Had to *set* the value with another assignment statement
* Some functions do change state

Try 

bc. awesomelist = [5,2,1,8]
awesomelist.sort!
awesomelist

How did that happen? Actions that end with a @!@ *change* the data!
This is a programming convention, but a good one to follow.

h1. Hashes

Let's consider a book rating system: 
* We use numeric values 0-5 to represent a book that you've read
* :notfinished will represent a book that you haven't finished
* We'll store all this data in a hash

Fill in a hash with some books, e.g.

bc. books = { "Left Hand of Darkness"        => 5,
          "The Word for World Is Forest" => 5,
          "Nevermind the Pollacks"       => 0,
          "Only Revolutions"             => :not_finished }

h1. Hashes

We can retrieve the rating for a particular book like so

@books["Left Hand of Darkness"]@

We can also *set* values like so

@books["Only Revolutions"] = 3@

How can we add a rating for a new book? Any guesses?


h1. Hashes

We can retrieve the rating for a particular book like so

@books["Left Hand of Darkness"]@

We can also *set* values like so

@books["Only Revolutions"] = 3@

How can we add a rating for a new book? Any guesses?

We set the value of the book just like before!

@books["White Teeth"] = 4@

h1. Let's Try Something

@40.reverse@

What happens?

h1. Let's Try Something

@40.reverse@

What happens?

Ruby just reported @NoMethodError: undefined method `reverse' for 40:Fixnum@

That means that @reverse@ is not defined for the number 40.

Most computations in Ruby are performed by *methods*.
Type @40.methods@ to see which methods are available for basic numbers.

Notice @+@, @-@, et al. in the list? 

What about @"chicken".methods@?

h1. Objects

An object is a piece of data along with the methods, computations, that
can operate on it.

Everything in Ruby is an object: numbers, strings, hashes, etc.

How do you know what kind of object something is? Ask!

@40.class@

What *is* a class?

h1. Classes & Methods

h2. Classes
* Classes classifying objects 
** All numbers can be added
** All strings can be reversed
* Define kinds of data and methods on that data
* Templates for making objects

Let's learn the syntax by example

bc. class Counter 
  @value
  def new
    @value = 0
  end
  def increment
    @value = @value + 1
  end
end

h1. Classes

Let's use our Counter class

bc. count = new Counter
count.increment
count.increment
count.class
count.methods

With @count.methods@, what did you see?

h1. Classes

Can add methods to existing classes as well

bc. class String
  def chicken?
    self == chicken?
  end
end
"chicken".chicken?
"puppy".chicken?

@self@ is a way of referring to the object that the method is being called on.

In @"puppy".chicken?@, @self@ is @"puppy"@.

h1. Classes Exercise

Add a method to String that will test to see if a string is a palindrome.

A palindrome is any string that is the same read forwards or backwards.

To get you started type the following at the command line:

bc. class String
  def palindrome?

and finish the rest! Test it on @"abba".palindrome?@ and @"puppy".palindrome?@

h1. Learn more about common Ruby classes

"http://rubydoc.info/stdlib/core/":http://rubydoc.info/stdlib/core

Good places to start: Array, Enumerable, Fixnum, Float, Hash, NilClass, String, Time

h1. Blocks

* A *block* is a computation, but *not* a method
* A block is of the form @{|arg1, arg2, ..| code}@
* @{|v| v.palindrome?}
* @{|x, y| x * y}

Some methods take blocks.

@list.each {|p| code}@ runs @code@ on every element of @list@

bc. list = [1,2,3,4]
list.each {|n| n + 1}

A more complicated example of using each:

bc. reviews = Hash.new(0)
reviews = books.values.each {|rate| reviews[rate] = review[rate] + 1}
reviews

@reviews@ is a count of how many reviews you gave with a particular rating

@reviews[5]@

h1. Control Structures

Ruby provides control structures for writing more complicated code

If statements are a switch on whether the argument is true or false.

bc. if true
     then 1
     else 2
    end

bc. if false
     then 1
     else 2
    end

h1. Control Structures

While statements allow repetition:

bc. i = 0
c = new Counter
while i < 10
  c.increment
  i = i + 1
end
c.@value

h1. Control Structures

For-in statements allow iteration over a structure such as a list

bc. list = [1,2,3,4,5]
sum = 0
for n in list
  sum = sum + n
end
sum

h1. Koans

(Addie should write what she wants here)

h1. Intro To Rails

(Give a more technical description of what Rails does: a system for generating
and handling classes to represent the data of your webapp)

h1. An Example Rails App

(directions for how to run this application and what to do with it as
examples - need a script for manipulating it in the web browser.
Need examples of 
# Viewing data
# Creating data
# Modifying data
# Destroying data
End with the Gospel(in the old German sense) of Rails: much of the code
needed to do those things can automatically be created by rails
)

h1. Rails console examples

So here we need probably 5-10 slides of rails for zombies like examples of how
this should all work

h1. Cont.

h1. Cont.

h1. Cont.

h1. Cont.

h1. Cont.

h1. The code behind the curtain

how to use scaffolding - should be a step by step guide of how we made this
and explaining what the commands are doing. I'm guessing quite a few slides
will go here.

h1. Wrap-up

What we learned, summarized in a few slides

h1. Stepping outside

(Reid will talk about the wider ecosystem and what to expect, etc.)
