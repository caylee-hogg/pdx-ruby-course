% README
% THESE SLIDES ARE NOT GOOD - JUST A REALLY SILLY VERBOSE ROUGH DRAFT
% LET'S RIP THEM APART TO MAKE SOMETHING BETTER

h1. Outline of the Day


h1. What is programming?

* Programming is the act of writing programs
* A program is just text
* A program is a precise description of how to perform a *computation* on *data*
* Data
** Numbers
** Strings: pieces of text
** Lists of things
** Booleans: true and false
* Computations
** Add 3 and 4
** Find the largest number in a list of numbers
** Contact Trimet's network and find the most convenient bus route

h1. What is a programming language?

* A human readable format for describing computations
* Compilers or interpreters convert human-readable to machine-readable
* Any language can describe the same computations
* Different languages are really just different vocabulary 
* Different vocabulary means a difference in ease of expressing an idea

h1. Why Ruby?

* Easy to learn
* Strong community in Portland
* Rails gives Ruby a good, simple, vocabulary for web development

h1. Starting Ruby

instructions to start irb, a couple of words on how to navigate it?
Cute tricks, pitfalls?

% Okay, so one thing we need to do here is figure out just exactly what we'll
% do with respect to TryRuby. We can't, in some sense, just have people follow
% along at home because there's all sorts of cute stuff it does with an
% that we can't just replicate easily

h1. Basic Ruby Data

|Numbers | @1@, @2@, @3@|
|Strings | @"chicken"@ |
|Booleans| @true@, @false@|
|Symbols | @:chicken@ |
|Arrays | @[1 , 7, "cake"]@|
|Hashes  | @{:chicken => "chicken", :sillyexample => :chicken}@|

type these at the command line! What happens? 

That's the data, where are the computations?

h1. Basic Ruby Computations

| @2 + 2@ | |
| @3 * 3@ | |
| @"chicken".reverse@ | |
| @"chicken".length@  | |
| @2 + 2 == 4@ | |
| @2 + 2 == 5@ | |

h1. Basic Ruby Computations

| @2 + 2@ | @4@ |
| @3 * 3@ | |
| @"chicken".reverse@ | |
| @"chicken".length@  | |
| @2 + 2 == 4@ | |
| @2 + 2 == 5@ | |


h1. Basic Ruby Computations

| @2 + 2@ | @4@ |
| @3 * 3@ | @9@ |
| @"chicken".reverse@ | |
| @"chicken".length@  | |
| @2 + 2 == 4@ | |
| @2 + 2 == 5@ | |


h1. Basic Ruby Computations

| @2 + 2@ | @4@ |
| @3 * 3@ | @9@ |
| @"chicken".reverse@ | @"nekcihc"@ |
| @"chicken".length@  | |
| @2 + 2 == 4@ | |
| @2 + 2 == 5@ | |


h1. Basic Ruby Computations

| @2 + 2@ | @4@ |
| @3 * 3@ | @9@ |
| @"chicken".reverse@ | @"nekcihc"@ |
| @"chicken".length@  | @7@ |
| @2 + 2 == 4@ | @true@ |
| @2 + 2 == 5@ | |


h1. Basic Ruby Computations

| @2 + 2@ | @4@ |
| @3 * 3@ | @9@ |
| @"chicken".reverse@ | @"nekcihc"@ |
| @"chicken".length@  | @7@ |
| @2 + 2 == 4@ | @true@ |
| @2 + 2 == 5@ | @false@ |

What do you think @"chicken".reverse.length@ does?


h1. That's Nice But...

* How do we chain together steps or use the result of an action?
* Variables name particular values
* @var1 = 4@, @var2 = "chicken"@

Try typing the following, noting what happens at each step 

bc. thing = "chicken"
thing
thing.reverse
thing
thing = thing.reverse

h1. Changing variables

* @thing.reverse@ didn't permanently reverse the string!
* Had to *set* the value with another assignment statement
* Some functions do change state

Try 

bc. awesomelist = [5,2,1,8]
awesomelist.sort!
awesomelist

How did that happen? Actions that end with a @!@ *change* the data!
A programming convention, but a good one to follow.

h1. Hashes

Let's consider a book rating system: 
* We use numeric values 0-5 to represent a book that you've read
* :notfinished will represent a book that you haven't finished
* We'll store all this data in a hash

Fill in a hash with some books, e.g.

bc. books = {"Left Hand of Darkness" => 5, 
         "The Word for World Is Forest" => 5,
         "Nevermind the Pollacks" => 0,
         "Only Revolutions" => :notfinished}

h1. Hashes

We can retrieve the rating for a particular book like so

@books["Left Hand of Darkness"]

We can also *set* values like so

@books["Only Revolutions" => 3]

h1. Let's Try Something

@40.reverse@

What happens?

h1. @NoMethodError@

@reverse@ isn't defined for numbers

h1. Objects

Ruby is "object-oriented". A fancy way of saying that everything you can
manipulate in Ruby has both data stored in it and computations, called methods,
that can manipulate that data.

For example, "puppy" is a String and .reverse is a method that can reverse a
string - hence "puppy".reverse returns "yppup"

Need a table of examples here, perhaps. What things are Objects?

h1. Classes & Methods

h2. Classes
* Classes classifying objects. 
* Describe data and methods

Let's learn the syntax by example

bc. class Counter 
  @value
  def new
    @value = 0
  end
  def increment
    @value = @value + 1
  end
end

h1. Blocks

h1. Control Structures

h1. Koans

(Addie should write what she wants here)

h1. Intro To Rails

(Give a more technical description of what Rails does: a system for generating
and handling classes to represent the data of your webapp)

h1. An Example Rails App

(directions for how to run this application and what to do with it as
examples - need a script for manipulating it in the web browser.
Need examples of 
# Viewing data
# Creating data
# Modifying data
# Destroying data
End with the Gospel(in the old German sense) of Rails: much of the code
needed to do those things can automatically be created by rails
)

h1. Rails console examples

So here we need probably 5-10 slides of rails for zombies like examples of how
this should all work

h1. Cont.

h1. Cont.

h1. Cont.

h1. Cont.

h1. Cont.

h1. The code behind the curtain

how to use scaffolding - should be a step by step guide of how we made this
and explaining what the commands are doing. I'm guessing quite a few slides
will go here.

h1. Wrap-up

What we learned, summarized in a few slides

h1. Stepping outside

(Reid will talk about the wider ecosystem and what to expect, etc.)